// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/caos/eventstore-lib/pkg/storage (interfaces: Storage)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	models "github.com/caos/eventstore-lib/pkg/models"
	storage "github.com/caos/eventstore-lib/pkg/storage"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockStorage is a mock of Storage interface
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
}

// MockStorageMockRecorder is the mock recorder for MockStorage
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// Filter mocks base method
func (m *MockStorage) Filter(arg0 context.Context, arg1 models.Events, arg2 models.SearchQuery) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Filter", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Filter indicates an expected call of Filter
func (mr *MockStorageMockRecorder) Filter(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Filter", reflect.TypeOf((*MockStorage)(nil).Filter), arg0, arg1, arg2)
}

// Health mocks base method
func (m *MockStorage) Health() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Health")
	ret0, _ := ret[0].(error)
	return ret0
}

// Health indicates an expected call of Health
func (mr *MockStorageMockRecorder) Health() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Health", reflect.TypeOf((*MockStorage)(nil).Health))
}

// LockAggregates mocks base method
func (m *MockStorage) LockAggregates(arg0 context.Context, arg1 ...models.Aggregate) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "LockAggregates", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// LockAggregates indicates an expected call of LockAggregates
func (mr *MockStorageMockRecorder) LockAggregates(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LockAggregates", reflect.TypeOf((*MockStorage)(nil).LockAggregates), varargs...)
}

// PushEvents mocks base method
func (m *MockStorage) PushEvents(arg0 context.Context, arg1 ...models.Aggregate) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PushEvents", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PushEvents indicates an expected call of PushEvents
func (mr *MockStorageMockRecorder) PushEvents(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PushEvents", reflect.TypeOf((*MockStorage)(nil).PushEvents), varargs...)
}

// Start mocks base method
func (m *MockStorage) Start(arg0 ...storage.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Start", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start
func (mr *MockStorageMockRecorder) Start(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockStorage)(nil).Start), arg0...)
}

// UnlockAggregates mocks base method
func (m *MockStorage) UnlockAggregates(arg0 context.Context, arg1 ...models.Aggregate) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UnlockAggregates", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnlockAggregates indicates an expected call of UnlockAggregates
func (mr *MockStorageMockRecorder) UnlockAggregates(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnlockAggregates", reflect.TypeOf((*MockStorage)(nil).UnlockAggregates), varargs...)
}

// ValidateLatestSequence mocks base method
func (m *MockStorage) ValidateLatestSequence(arg0 context.Context, arg1 ...models.Aggregate) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ValidateLatestSequence", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateLatestSequence indicates an expected call of ValidateLatestSequence
func (mr *MockStorageMockRecorder) ValidateLatestSequence(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateLatestSequence", reflect.TypeOf((*MockStorage)(nil).ValidateLatestSequence), varargs...)
}
