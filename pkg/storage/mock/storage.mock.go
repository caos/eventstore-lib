// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/caos/eventstore-lib/pkg/storage (interfaces: Storage)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	models "github.com/caos/eventstore-lib/pkg/models"
	storage "github.com/caos/eventstore-lib/pkg/storage"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockStorage is a mock of Storage interface
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
}

// MockStorageMockRecorder is the mock recorder for MockStorage
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// BuildFilter mocks base method
func (m *MockStorage) BuildFilter(arg0 models.Filter, arg1 reflect.StructField) (storage.Filter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuildFilter", arg0, arg1)
	ret0, _ := ret[0].(storage.Filter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BuildFilter indicates an expected call of BuildFilter
func (mr *MockStorageMockRecorder) BuildFilter(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildFilter", reflect.TypeOf((*MockStorage)(nil).BuildFilter), arg0, arg1)
}

// CreateEvents mocks base method
func (m *MockStorage) CreateEvents(arg0 context.Context, arg1 ...models.Event) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateEvents", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateEvents indicates an expected call of CreateEvents
func (mr *MockStorageMockRecorder) CreateEvents(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEvents", reflect.TypeOf((*MockStorage)(nil).CreateEvents), varargs...)
}

// GetEvent mocks base method
func (m *MockStorage) GetEvent(arg0 context.Context, arg1 models.Event, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEvent", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetEvent indicates an expected call of GetEvent
func (mr *MockStorageMockRecorder) GetEvent(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEvent", reflect.TypeOf((*MockStorage)(nil).GetEvent), arg0, arg1, arg2)
}

// GetEvents mocks base method
func (m *MockStorage) GetEvents(arg0 context.Context, arg1 models.Events, arg2 ...storage.Filter) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetEvents", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetEvents indicates an expected call of GetEvents
func (mr *MockStorageMockRecorder) GetEvents(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEvents", reflect.TypeOf((*MockStorage)(nil).GetEvents), varargs...)
}

// Health mocks base method
func (m *MockStorage) Health() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Health")
	ret0, _ := ret[0].(error)
	return ret0
}

// Health indicates an expected call of Health
func (mr *MockStorageMockRecorder) Health() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Health", reflect.TypeOf((*MockStorage)(nil).Health))
}

// IsLatestSequence mocks base method
func (m *MockStorage) IsLatestSequence(arg0 context.Context, arg1 uint64, arg2 ...storage.Filter) bool {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "IsLatestSequence", varargs...)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsLatestSequence indicates an expected call of IsLatestSequence
func (mr *MockStorageMockRecorder) IsLatestSequence(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsLatestSequence", reflect.TypeOf((*MockStorage)(nil).IsLatestSequence), varargs...)
}

// Start mocks base method
func (m *MockStorage) Start(arg0 ...storage.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Start", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start
func (mr *MockStorageMockRecorder) Start(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockStorage)(nil).Start), arg0...)
}
