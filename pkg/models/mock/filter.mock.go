// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/caos/eventstore-lib/pkg/models (interfaces: Filter,SearchQuery)

// Package mock is a generated GoMock package.
package mock

import (
	models "github.com/caos/eventstore-lib/pkg/models"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockFilter is a mock of Filter interface
type MockFilter struct {
	ctrl     *gomock.Controller
	recorder *MockFilterMockRecorder
}

// MockFilterMockRecorder is the mock recorder for MockFilter
type MockFilterMockRecorder struct {
	mock *MockFilter
}

// NewMockFilter creates a new mock instance
func NewMockFilter(ctrl *gomock.Controller) *MockFilter {
	mock := &MockFilter{ctrl: ctrl}
	mock.recorder = &MockFilterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockFilter) EXPECT() *MockFilterMockRecorder {
	return m.recorder
}

// GetField mocks base method
func (m *MockFilter) GetField() models.Field {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetField")
	ret0, _ := ret[0].(models.Field)
	return ret0
}

// GetField indicates an expected call of GetField
func (mr *MockFilterMockRecorder) GetField() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetField", reflect.TypeOf((*MockFilter)(nil).GetField))
}

// GetOperation mocks base method
func (m *MockFilter) GetOperation() models.Operation {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOperation")
	ret0, _ := ret[0].(models.Operation)
	return ret0
}

// GetOperation indicates an expected call of GetOperation
func (mr *MockFilterMockRecorder) GetOperation() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOperation", reflect.TypeOf((*MockFilter)(nil).GetOperation))
}

// GetValue mocks base method
func (m *MockFilter) GetValue() interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetValue")
	ret0, _ := ret[0].(interface{})
	return ret0
}

// GetValue indicates an expected call of GetValue
func (mr *MockFilterMockRecorder) GetValue() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetValue", reflect.TypeOf((*MockFilter)(nil).GetValue))
}

// MockSearchQuery is a mock of SearchQuery interface
type MockSearchQuery struct {
	ctrl     *gomock.Controller
	recorder *MockSearchQueryMockRecorder
}

// MockSearchQueryMockRecorder is the mock recorder for MockSearchQuery
type MockSearchQueryMockRecorder struct {
	mock *MockSearchQuery
}

// NewMockSearchQuery creates a new mock instance
func NewMockSearchQuery(ctrl *gomock.Controller) *MockSearchQuery {
	mock := &MockSearchQuery{ctrl: ctrl}
	mock.recorder = &MockSearchQueryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSearchQuery) EXPECT() *MockSearchQueryMockRecorder {
	return m.recorder
}

// Filters mocks base method
func (m *MockSearchQuery) Filters() []models.Filter {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Filters")
	ret0, _ := ret[0].([]models.Filter)
	return ret0
}

// Filters indicates an expected call of Filters
func (mr *MockSearchQueryMockRecorder) Filters() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Filters", reflect.TypeOf((*MockSearchQuery)(nil).Filters))
}

// Limit mocks base method
func (m *MockSearchQuery) Limit() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Limit")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// Limit indicates an expected call of Limit
func (mr *MockSearchQueryMockRecorder) Limit() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Limit", reflect.TypeOf((*MockSearchQuery)(nil).Limit))
}

// OrderDesc mocks base method
func (m *MockSearchQuery) OrderDesc() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OrderDesc")
	ret0, _ := ret[0].(bool)
	return ret0
}

// OrderDesc indicates an expected call of OrderDesc
func (mr *MockSearchQueryMockRecorder) OrderDesc() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OrderDesc", reflect.TypeOf((*MockSearchQuery)(nil).OrderDesc))
}
