// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/caos/eventstore-lib/pkg/models (interfaces: Event)

// Package mock is a generated GoMock package.
package mock

import (
	models "github.com/caos/eventstore-lib/pkg/models"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
	time "time"
)

// MockEvent is a mock of Event interface
type MockEvent struct {
	ctrl     *gomock.Controller
	recorder *MockEventMockRecorder
}

// MockEventMockRecorder is the mock recorder for MockEvent
type MockEventMockRecorder struct {
	mock *MockEvent
}

// NewMockEvent creates a new mock instance
func NewMockEvent(ctrl *gomock.Controller) *MockEvent {
	mock := &MockEvent{ctrl: ctrl}
	mock.recorder = &MockEventMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockEvent) EXPECT() *MockEventMockRecorder {
	return m.recorder
}

// GetAggregate mocks base method
func (m *MockEvent) GetAggregate() models.Aggregate {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAggregate")
	ret0, _ := ret[0].(models.Aggregate)
	return ret0
}

// GetAggregate indicates an expected call of GetAggregate
func (mr *MockEventMockRecorder) GetAggregate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAggregate", reflect.TypeOf((*MockEvent)(nil).GetAggregate))
}

// GetCommand mocks base method
func (m *MockEvent) GetCommand() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommand")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetCommand indicates an expected call of GetCommand
func (mr *MockEventMockRecorder) GetCommand() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommand", reflect.TypeOf((*MockEvent)(nil).GetCommand))
}

// GetCreationDate mocks base method
func (m *MockEvent) GetCreationDate() time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCreationDate")
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// GetCreationDate indicates an expected call of GetCreationDate
func (mr *MockEventMockRecorder) GetCreationDate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCreationDate", reflect.TypeOf((*MockEvent)(nil).GetCreationDate))
}

// GetData mocks base method
func (m *MockEvent) GetData() []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetData")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// GetData indicates an expected call of GetData
func (mr *MockEventMockRecorder) GetData() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetData", reflect.TypeOf((*MockEvent)(nil).GetData))
}

// GetID mocks base method
func (m *MockEvent) GetID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetID")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetID indicates an expected call of GetID
func (mr *MockEventMockRecorder) GetID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetID", reflect.TypeOf((*MockEvent)(nil).GetID))
}

// GetLastSequence mocks base method
func (m *MockEvent) GetLastSequence() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastSequence")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// GetLastSequence indicates an expected call of GetLastSequence
func (mr *MockEventMockRecorder) GetLastSequence() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastSequence", reflect.TypeOf((*MockEvent)(nil).GetLastSequence))
}

// GetSequence mocks base method
func (m *MockEvent) GetSequence() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSequence")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// GetSequence indicates an expected call of GetSequence
func (mr *MockEventMockRecorder) GetSequence() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSequence", reflect.TypeOf((*MockEvent)(nil).GetSequence))
}

// SetCreationDate mocks base method
func (m *MockEvent) SetCreationDate(arg0 time.Time) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetCreationDate", arg0)
}

// SetCreationDate indicates an expected call of SetCreationDate
func (mr *MockEventMockRecorder) SetCreationDate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCreationDate", reflect.TypeOf((*MockEvent)(nil).SetCreationDate), arg0)
}

// SetLastSequence mocks base method
func (m *MockEvent) SetLastSequence(arg0 uint64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetLastSequence", arg0)
}

// SetLastSequence indicates an expected call of SetLastSequence
func (mr *MockEventMockRecorder) SetLastSequence(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLastSequence", reflect.TypeOf((*MockEvent)(nil).SetLastSequence), arg0)
}

// SetSequence mocks base method
func (m *MockEvent) SetSequence(arg0 uint64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetSequence", arg0)
}

// SetSequence indicates an expected call of SetSequence
func (mr *MockEventMockRecorder) SetSequence(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSequence", reflect.TypeOf((*MockEvent)(nil).SetSequence), arg0)
}
